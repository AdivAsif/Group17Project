@page "/Recommendations"
@inject NavigationManager NavigationManager
@inject ITV_SeriesClient SeriesClient
@using Group17PortalWasm.Services
@using Group17PortalWasm.Helpers
@using System.Globalization
@using Group17.TVSeries
@using APIException = Group17.Profile.APIException
@inherits RecommendationsComponentBase

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (IsLoading)
    {
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-4 m-4" Style="text-align: center">
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5" Class="d-flex justify-content-center">
                Shows similar to @SeriesInfo?.Name
            </MudText>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-2"></MudDivider>
            <MudGrid Style="justify-content: center !important;">
                @if (Recommendations == null || Recommendations.Count == 0)
                {
                    <MudItem xs="12" sm="12">
                        <MudPaper Class="pa-4 m-4" Style="text-align: center">
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    @foreach (var series in Recommendations)
                    {
                        <MudItem xs="2">
                            <MudCard Outlined="true" @onclick="@(() => GoToSeries(series.Id))" Class="custom-card" Style="cursor: pointer; height: 500px">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">@series?.Name</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardMedia Image="@series?.Poster" Style="height: 100%; object-fit: contain"/>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {

    protected override async Task OnInitializedAsync()
    {
        StartLoading();
        try
        {
            if (!string.IsNullOrWhiteSpace(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query) && int.TryParse(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query[1..], out var parsedInt))
            {
                SeriesId = parsedInt;
            }
            else
            {
                NavigationManager.NavigateTo("/Profile", true);
            }
            var series = await SeriesClient.Get_series_info_by_idAsync(SeriesId);
            SeriesInfo = series.Series_info;
            await GetRecommendations();
        }
        catch (APIException ex)
        {
            await DisplayError(ErrorHelper.UnwrapError(ex).ToString());
        }
        StopLoading();
    }

    private async Task GetRecommendations()
    {
        var recommendations = await SeriesClient.Get_recommendations_by_idAsync(SeriesId);
        Recommendations = recommendations.Recommendations.ToList();
        StateHasChanged();
    }

    private async Task GoToSeries(int id)
    {
        NavigationManager.NavigateTo($"/Series?{id}", false);
    }

    private SeriesInfo? SeriesInfo { get; set; }
    private int SeriesId { get; set; }
    private List<SeriesInfo>? Recommendations { get; set; } = new();

}